type error = {
  resource: string;
  ?field: string option;
  code: string;
  ?message: string option;
} <ocaml field_prefix="error_">

type message = {
  message: string;
  ~errors <ocaml default="[]">: error list;
} <ocaml field_prefix="message_">

type error_detail = {
  message: string;
  detail: string option
}

type sort = [
  | Asc <json name="asc">
  | Desc <json name="desc">
]

type merge_request_scope = [
  | CreatedByMe <json name="created_by_me">
  | AssignedToMe <json name="assigned_to_me">
  | All <json name="all">
]

(* Dates as YYYY-MM-DD *)
type date = string wrap <ocaml module="Gitlab_json.Date">

(* ISO8601 Date Times *)
type date_time = string wrap <ocaml module="Gitlab_json.DateTime">

type user = {
  id: int <ocaml repr="int64">;
  username: string;
  name: string;
  state: string;
  avatar_url: string nullable;
  web_url: string;
  created_at: date_time;
  ?bio: string option;
  ?bio_html: string option;
  ?location: string option;
  ?public_email: string option;
  ?skype: string option;
  ?linkedin: string option;
  ?twitter: string option;
  ?website_url: string option;
  ?organization: string option;
  ?job_title: string option;
  ?pronouns: string option;
  bot: bool;
  work_information: string nullable;
  followers: int;
  following: int;
} <ocaml field_prefix="user_">

type user_short = {
  id: int;
  name: string;
  username: string;
  ?state: string nullable;
  ?avatar_url: string nullable;
  ?web_url: string nullable;
  ?email: string nullable;
} <ocaml field_prefix="user_short_">

type users = user_short list

type owner = {
  id: int;
  name: string;
  created_at: date_time;
} <ocaml field_prefix="owner_">

type namespace = {
  id: int;
  name: string;
  path: string;
  kind: string;
  full_path: string;
  parent_id: int nullable;
  avatar_url: string nullable;
  web_url: string;
} <ocaml field_prefix="namespace_">

type merge_method = [
  | Merge <json name="merge">
  | RebaseMerge <json name="rebase_merge">
  | FastForward <json name="ff">
]

type statistics = {
  commit_count: int;
  storage_size: int;
  repository_size: int;
  wiki_size: int;
  lfs_objects_size: int;
  job_artifacts_size: int;
  packages_size: int;
  snippets_size: int;
} <ocaml field_prefix="statistics_">

type links = {
  self: string;
  ?notes: string option;
  ?award_emoji: string option;
  ?project: string option;
  ?issues: string option;
  ?merge_requests: string option;
  ?repo_branches: string option;
  ?labels: string option;
  ?events: string option;
  ?members: string option;
} <ocaml field_prefix="links_">

type visibility = [
  | Private <json name="private">
  | Public <json name="public">
  | Internal <json name="internal">
]

type project_short = {
  id: int;
  name: string;
  description: string;
  name_with_namespace: string;
  path: string;
  path_with_namespace: string;
  created_at: date_time;
  default_branch: string;
  tag_list: string list nullable;
  topics: string list nullable;
  ssh_url_to_repo: string;
  http_url_to_repo: string;
  web_url: string;
  readme_url: string nullable;
  avatar_url: string nullable;
  forks_count: int;
  star_count: int;
  last_activity_at: date_time;
  namespace: namespace;
} <ocaml field_prefix="project_short_">

type project_shorts = project_short list

type project_full = {
  inherit project_short;
  ?runners_token: string nullable;
  ?statistics: statistics nullable;
  allow_merge_on_skipped_pipeline: bool nullable;
  analytics_access_level: string;
  approvals_before_merge: int;
  archived: bool;
  auto_cancel_pending_pipelines: string;
  auto_devops_deploy_strategy: string;
  auto_devops_enabled: bool;
  autoclose_referenced_issues: bool;
  build_coverage_regex: string nullable;
  build_timeout: int;
  builds_access_level: string;
  can_create_merge_request_in: bool;
  ci_config_path: string nullable;
  ci_default_git_depth: int nullable;
  ci_forward_deployment_enabled: bool nullable;
  ci_job_token_scope_enabled: bool;
  compliance_frameworks: string list;
  ?container_expiration_policy: container_expiration_policy option;
  container_registry_access_level: string;
  container_registry_enabled: bool;
  container_registry_image_prefix: string;
  creator_id: int;
  emails_disabled: string nullable;
  empty_repo: bool;
  external_authorization_classification_label: string;
  ?forked_from_project: project_short option;
  forking_access_level: string;
  import_status: string;
  issues_access_level: string;
  issues_enabled: bool;
  issues_template: string nullable;
  jobs_enabled: bool;
  keep_latest_artifact: bool;
  lfs_enabled: bool;
  links <json name="_links">: links;
  marked_for_deletion_at: date nullable;
  marked_for_deletion_on: date nullable;
  merge_method: merge_method;
  merge_pipelines_enabled: bool;
  merge_requests_access_level: string;
  merge_requests_enabled: bool;
  merge_requests_template: string nullable;
  merge_trains_enabled: bool;
  mirror: bool;
  only_allow_merge_if_all_discussions_are_resolved: bool nullable;
  only_allow_merge_if_pipeline_succeeds: bool;
  open_issues_count: int;
  operations_access_level: string;
  owner: user_short;
  packages_enabled: bool nullable;
  pages_access_level: string;
  path: string;
  path_with_namespace: string;
  permissions: permissions;
  public_jobs: bool;
  printing_merge_request_link_enabled: bool;
  remove_source_branch_after_merge: bool nullable;
  repository_access_level: string;
  request_access_enabled: bool;
  requirements_enabled: bool;
  resolve_outdated_diff_discussions: bool nullable;
  restrict_user_defined_variables: bool nullable;
  security_and_compliance_enabled: bool;
  service_desk_address: string nullable;
  service_desk_enabled: bool nullable;
  shared_runners_enabled: bool;
  shared_with_groups: string list;
  snippets_enabled: bool;
  snippets_access_level: string;
  squash_option: string;
  suggestion_commit_message: string nullable;
  visibility: visibility;
  wiki_access_level: string;
  wiki_enabled: bool;
} <ocaml field_prefix="project_full_">

type projects_short = project_short list
type projects_full = project_full list

type project_access = {
  access_level: int;
  notification_level: int;
} <ocaml field_prefix="project_access_">

type permissions = {
  group_access: string nullable;
  project_access: project_access;
} <ocaml field_prefix="permissions_">

type container_expiration_policy = {
  cadence: string;
  enabled: bool;
  keep_n: int;
  name_regex: string;
  name_regex_keep: string nullable;
  next_run_at: date_time;
  older_than: string;
} <ocaml field_prefix="container_expiration_policy_">

type state = [
  | Opened <json name="opened">
  | Closed <json name="closed">
  | Locked <json name="locked">
  | Merged <json name="merged">
]

type merge_status = [
  | Unchecked <json name="unchecked">
  | Checking <json name="checking">
  | CanBeMerged <json name="can_be_merged">
  | CannotBeMerged <json name="cannot_be_merged">
  | CannotBeMergedRecheck <json name="cannot_be_merged_recheck">
  | Preparing <json name="preparing">
]

type milestone_state = [
  | Active <json name="active">
  | Closed <json name="closed">
]

type milestone = {
  id: int;
  iid: int;
  ?project_id: int option;
  ?group_id: int option;
  title: string;
  description: string;
  state: milestone_state;
  created_at: date_time;
  updated_at: date_time;
  due_date: date nullable;
  start_date: date nullable;
  expired: bool nullable;
  web_url: string;
} <ocaml field_prefix="milestone_">

type milestones = milestone list

type references = {
  short: string;
  relative: string;
  full: string;
} <ocaml field_prefix="references_">

type time_stats = {
  time_estimate: int;
  total_time_spent: int;
  human_time_estimate: int nullable;
  human_total_time_spent: int nullable;
} <ocaml field_prefix="time_stats_">

type task_completion_status = {
  count: int;
  completed_count: int;
} <ocaml field_prefix="time_completion_status_">

type merge_request_short = {
  id: int;
  iid: int;
  title: string;
  source_branch: string;
  source_project_id: int;
  target_branch: string;
  target_project_id: int;
  state: state;
  merge_status: merge_status;
  url: string;
} <ocaml field_prefix="merge_request_short_">

type merge_request = {
  id: int;
  iid: int;
  project_id: int;
  title: string;
  description: string;
  state: state;
  merged_by: user_short nullable;
  merged_at: string nullable;
  closed_by: user_short nullable;
  closed_at: string nullable;
  created_at: date_time;
  updated_at: date_time;
  target_branch: string;
  source_branch: string;
  upvotes: int;
  downvotes: int;
  author: user_short;
  assignee: user_short nullable;
  approvals_before_merge: string nullable;
  ?allow_collaboration: bool nullable;
  ?allow_maintainer_to_push: bool nullable;
  blocking_discussions_resolved: bool;
  has_conflicts: bool;
  assignees: user_short list;
  reviewers: user_short list;
  source_project_id: int;
  target_project_id: int;
  labels: string list;
  draft: bool;
  work_in_progress: bool;
  milestone: milestone nullable;
  merge_when_pipeline_succeeds: bool;
  merge_status: merge_status;
  sha: string;
  merge_commit_sha: string nullable;
  squash_commit_sha: string nullable;
  user_notes_count: int;
  discussion_locked: bool nullable;
  should_remove_source_branch: bool nullable;
  force_remove_source_branch: bool nullable;
  web_url: string;
  reference: string;
  references: references;
  time_stats: time_stats;
  squash: bool;
  task_completion_status: task_completion_status nullable;
} <ocaml field_prefix="merge_request_">

type merge_requests = merge_request list

type commit = {
  id: string;
  short_id: string;
  title: string;
  author_name: string;
  author_email: string;
  authored_date: string;
  committed_date: date_time;
  committer_email: string;
  committer_name: string;
  created_at: date_time;
  message: string;
  parent_ids: string list nullable;
  (*trailers: string nullable;*)
  web_url: string;
} <ocaml field_prefix="commit_">

type commits = commit list

type commit_comment = {
  note: string;
  author: user_short;
} <ocaml field_prefix="commit_comment_">

type commit_comments = commit_comment list

type commit_status = {
  id: int;
  sha: string;
  ref: string;
  status: string;
  name: string;
  target_url: string nullable;
  description: string nullable;
  created_at: date_time;
  started_at: date_time nullable;
  finished_at: date_time nullable;
  allow_failure: bool;
  coverage: string nullable;
  author: user_short;
} <ocaml field_prefix="commit_status_">

type commit_statuses = commit_status list

type commit_status_status = [
 | Pending <json name="pending">
 | Running <json name="running">
 | Success <json name="success">
 | Failed <json name="failed">
 | Cancelled <json name="cancelled">
] <ocaml field_prefix="commit_status_status_">

type line_type = [
  | New <json name="new">
  | Old <json name="old">
]

type commit_commented = {
  author: user_short;
  created_at: date_time;
  line_type: line_type;
  path: string;
  line: int;
  note: string;
} <ocaml field_prefix="commit_commented_">

type change = {
  old_path: string;
  new_path: string;
  a_mode: string;
  b_mode: string;
  diff: string;
  new_file: bool;
  renamed_file: bool;
  deleted_file: bool;
} <ocaml field_prefix="change_">

type changes = {
  id: int;
  iid: int;
  project_id: int;
  title: string;
  state: string; (* TODO Should be an enum *)
  created_at: date_time;
  updated_at: date_time;
  target_branch: string;
  source_branch: string;
  upvotes: int;
  downvotes: int;
  author: user_short;
  ?assignee: user_short option;
  ?assignees: user_short list option;
  reviewers: user_short list;
  source_project_id: int;
  target_project_id: int;
  labels: string list;
  description: string;
  draft: bool;
  work_in_progress: bool;
  milestone: milestone nullable;
  merge_when_pipeline_succeeds: bool;
  merge_status: merge_status;
  subscribed: bool;
  sha: string;
  merge_commit_sha: string nullable;
  squash_commit_sha: string nullable;
  user_notes_count: int;
  changes_count: int;
  should_remove_source_branch: bool;
  force_remove_source_branch: bool;
  squash: bool;
  web_url: string;
  references: references;
  discussion_locked: bool;
  time_stats: time_stats;
  task_completion_status: task_completion_status;
  changes: change list;
  overflow: bool;
} <ocaml field_prefix="changes_">

type repository = {
  name: string;
  url: string;
  description: string;
  homepage: string;
  ?git_http_url: string nullable;
  ?git_ssh_url: string nullable;
  ?visibility_level: int option;
} <ocaml field_prefix="repository_">

type author = {
  name: string;
  email: string;
} <ocaml field_prefix="author_">

type issue_type = [
 | Issue <json name="issue">
 | Incident <json name="incident">
 | TestCase <json name="test_case">
]

type create_issue = {
  ?assignee_id: int option;
  ?assignee_ids: int option;
  ?confidential: bool option;
  ?created_at: date_time option;
  ?description: string option;
  ?discussion_to_resolve: string option;
  ?due_date: date option;
  ?epic_id: int option;
  ?epic_iid: int option;
  id: int;
  ?iid: int option;
  ?issue_type: issue_type option;
  ?labels: string list option;
  ?merge_request_to_resolve_discussions_of: int option;
  ?milestone_id: int option;
  title: string;
  ?weight: int option;
} <ocaml field_prefix="create_issue_">

type issues = issue list

type issue = {
  id: int;
  iid: int;
  project_id: int;
  title: string;
  description: string;
  state: state;
  created_at: date_time;
  updated_at: date_time;
  closed_at: string nullable;
  closed_by: user_short nullable;
  labels: string list;
  milestone: string nullable;
  assignees: user_short list;
  author: user_short;
  type_ <json name="type">: string;
  assignee: user_short nullable;
  user_notes_count: int;
  merge_requests_count: int;
  upvotes: int;
  downvotes: int;
  due_date: date nullable;
  confidential: bool;
  discussion_locked: string nullable;
  issue_type: issue_type;
  web_url: string;
  time_stats: time_stats;
  task_completion_status: task_completion_status;
  ?weight: int option;
  blocking_issues_count: int;
  has_tasks: bool;
  links <json name="_links">: links;
  references: references;
  severity: string;
  moved_to_id: string nullable;
  service_desk_reply_to: string nullable;
  ?health_status: string option;
} <ocaml field_prefix="issue_">

type note_issue = {
  author_id: int;
  closed_at: string nullable;
  confidential: bool;
  created_at: date_time;
  description: string;
  discussion_locked: string nullable;
  due_date: date nullable;
  id: int;
  iid: int;
  last_edited_at: string nullable;
  last_edited_by_id: int nullable;
  milestone_id: int nullable;
  moved_to_id: string nullable;
  duplicated_to_id: int nullable;
  project_id: int;
  relative_position: int;
  state_id: int;
  time_estimate: int;
  title: string;
  updated_at: date_time;
  updated_by_id: string nullable;
  weight: string nullable;
  url: string;
  total_time_spent: int;
  time_change: int;
  human_total_time_spent: int nullable;
  human_time_change: int nullable;
  human_time_estimate: int nullable;
  assignee_ids: int list;
  assignee_id: int;
  labels: string list;
  state: state;
  severity: string;
} <ocaml field_prefix="note_issue_">

type commit_short_webhook = {
  id: string;
  message: string;
  title: string;
  timestamp: string;
  url: string;
  author: author;
} <ocaml field_prefix="commit_short_webhook_">

type project_webhook = {
  id: int;
  name: string;
  description: string nullable;
  web_url: string;
  avatar_url: string nullable;
  ci_config_path: string nullable;
  git_ssh_url: string;
  git_http_url: string;
  namespace: string;
  path_with_namespace: string;
  visibility_level: int;
  default_branch: string;
} <ocaml field_prefix="project_webhook_">

type merge_request_attributes = {
  ?action: string option;
  assignee_id: int nullable;
  assignee_ids: int list;
  author_id: int;
  created_at: date_time;
  description: string;
  head_pipeline_id: int nullable;
  id: int;
  iid: int;
  last_edited_at: string nullable;
  last_edited_by_id: int nullable;
  last_commit: commit_short_webhook;
  ?oldrev: string option;
  merge_commit_sha: string nullable;
  merge_error: string nullable;
  merge_params: merge_params;
  merge_status: merge_status;
  merge_user_id: int nullable;
  merge_when_pipeline_succeeds: bool;
  milestone_id: int nullable;
  source: project_webhook;
  source_branch: string;
  source_project_id: int;
  state_id: int;
  state: string;
  target: project_webhook;
  target_branch: string;
  target_project_id: int;
  title: string;
  updated_at: date_time;
  updated_by_id: int nullable;
  url: string;
  work_in_progress: bool;
  total_time_spent: int;
  time_change: int;
  time_estimate: int;
  human_total_time_spent: int nullable;
  human_time_change: int nullable;
  human_time_estimate: int nullable;
} <ocaml field_prefix="merge_request_attributes_">

type merge_params =  {
  force_remove_source_branch: string;
}  <ocaml field_prefix="merge_params_">

type label = {
  id: int;
  title: string;
  color: string;
  project_id: int;
  created_at: date_time;
  updated_at: date_time;
  template: bool;
  description: string nullable;
  label_type <json name="type">: string;
  group_id: int nullable;
} <ocaml field_prefix="label_">

type updated_by_id = {
  previous: int nullable;
  current: int;
} <ocaml field_prefix="update_by_id_">

type updated_at = {
  previous: string;
  current: string;
} <ocaml field_prefix="updated_at_">

type labels = {
  previous: label list;
  current: label list;
} <ocaml field_prefix="labels_">

type assignees = {
  previous: user_short list;
  current: user_short list;
} <ocaml field_prefix="assignees_">

type merge_request_changes = {
  ?updated_by_id: updated_by_id option;
  ?updated_at: updated_at option;
  ?assignees: assignees option;
} <ocaml field_prefix="merge_request_changes_">

(* TODO Rename these *)
type commit_webhook = {
  inherit commit_short_webhook;
  added: string list;
  modified: string list;
  removed: string list;
} <ocaml field_prefix="commit_webhook_">

type commits_webhook = commit_webhook list

type push_webhook = {
  event_name: string;
  before: string;
  after: string;
  ref: string;
  checkout_sha: string;
  message: string nullable;
  user_id: int;
  user_name: string;
  user_username: string;
  user_email: string nullable;
  user_avatar: string;
  project_id: int;
  project: project_webhook;
  commits: commits_webhook;
  total_commits_count: int;
  (* push_options: ??? *)
  repository: repository;
} <ocaml field_prefix="push_webhook_">

type merge_request_webhook = {
  event_type: string;
  user: user_short;
  project: project_webhook;
  attributes<json name="object_attributes">: merge_request_attributes;
  repository: repository;
  labels: label list;
  ?changes: merge_request_changes option;
  ?assignees: user_short list option;
} <ocaml field_prefix="merge_request_webhook_">

type issue_attributes = {
  assignee_id: int nullable;
  assignee_ids: int list;
  author_id: int;
  closed_at: string nullable;
  confidential: bool;
  created_at: date_time;
  description: string;
  discussion_locked: string nullable;
  due_date: string nullable;
  duplicated_to_id:string nullable;
  human_time_change:string nullable;
  human_time_estimate:string nullable;
  human_total_time_spent:string nullable;
  id: int;
  iid: int;
  labels: string list;
  last_edited_at: string nullable;
  last_edited_by_id: int nullable;
  milestone_id: int nullable;
  moved_to_id: int nullable;
  project_id: int;
  relative_position: int;
  severity: string;
  state: string;
  state_id: int;
  time_change: int;
  time_estimate: int;
  title: string;
  total_time_spent: int;
  updated_at: date_time;
  updated_by_id: int nullable;
  url: string;
  weight: int nullable;
} <ocaml field_prefix="issue_attributes_">

type issue_webhook = {
  event_type: string;
  user: user_short;
  project: project_webhook;
  attributes <json name="object_attributes">: issue_attributes;
  labels: label list;
  (* changes: ???; *)
  repository: repository;
  assignees: user_short list;
} <ocaml field_prefix="issue_webhook_">

type note_attributes = {
  attachment: string nullable;
  author_id: int;
  change_position: string nullable;
  commit_id: string nullable;
  created_at: date_time;
  discussion_id: string;
  id: int;
  line_code: int nullable;
  note: string;
  noteable_id: int;
  noteable_type: string;
  original_position: string nullable;
  position: string nullable;
  project_id: int;
  resolved_at: string nullable;
  resolved_by_id: string nullable;
  resolved_by_push: string nullable;
  st_diff: string nullable;
  system: bool;
  note_attribute_type <json name="type">: string nullable;
  updated_at: date_time;
  updated_by_id: string nullable;
  description: string;
  url: string;
} <ocaml field_prefix="note_attrbutes_">

type note_webhook = {
  event_type: string;
  user: user_short;
  project: project_webhook;
  attributes <json name="object_attributes">: note_attributes;
  repository: repository;
  project_id: int;
  issue: note_issue;
} <ocaml field_prefix="note_webhook_">

type wiki = {
  web_url: string;
  git_ssh_url: string;
  git_http_url: string;
  path_with_namespace: string;
  default_branch: string;
} <ocaml field_prefix="wiki_">

type wiki_attributes = {
  title: string;
  content: string;
  format: string;
  slug: string;
  url: string;
  action: string;
  diff_url: string;
} <ocaml field_prefix="wiki_attributes_">

type wiki_page_webhook = {
  user: user_short;
  project: project_webhook;
  wiki: wiki;
  attributes <json name="object_attributes">: wiki_attributes;
} <ocaml field_prefix="wiki_page_webhook_">

type source = {
  format: string;
  url: string;
} <ocaml field_prefix="source_">

type assets = {
  count: int;
  links: string list;
  sources: source list;
} <ocaml field_prefix="assets_">

type release_webhook = {
  id: int;
  created_at: date_time;
  description: string;
  name: string;
  released_at: string;
  tag: string;
  project: project_webhook;
  url: string;
  action: string;
  assets: assets;
  commit: commit_short_webhook;
} <ocaml field_prefix="release_webhook_">

type runner_type = [
 | Project <json name="project_type">
 | Instance <json name="instance_type">
 | Group <json name="group_type">
]

type runner = {
  id: int;
  description: string;
  runner_type: runner_type;
  active: bool;
  is_shared: bool;
  ?tags: string list option;
} <ocaml field_prefix="runner_">

type runners = runner list

type job_webhook_commit = {
  id: int;
  sha: string;
  message: string;
  author_name: string;
  author_email: string;
  author_url: string;
  status: string; (* TODO Possible variant *)
  duration: float nullable;
  started_at: date_time;
  finished_at: date_time nullable;
} <ocaml field_prefix="job_webhook_commit_">

type job_webhook = {
  ref: string;
  tag: bool;
  before_sha: string;
  sha: string;
  build_id: int;
  build_name: string;
  build_stage: string;
  build_status: string; (* TODO Make this a variant *)
  build_created_at: date_time;
  build_started_at: date_time;
  build_finished_at: date_time;
  build_duration: float;
  build_queued_duration: float;
  build_allow_failure: bool;
  build_failure_reason: string; (* TODO Possible variant *)
  pipeline_id: int;
  runner: runner;
  project_id: int;
  project_name: string;
  user: user_short;
  commit: job_webhook_commit;
  repository: repository;
  environment: string nullable;
} <ocaml field_prefix="job_webhook_">

type artifacts_file = {
  filename: string nullable;
  size: int nullable;
} <ocaml field_prefix="artifacts_file_">

type pipeline_build = {
  id: int;
  stage: string;
  name: string;
  status: string; (* TODO Possible variant *)
  created_at: date_time;
  started_at: date_time nullable;
  finished_at: date_time nullable;
  duration: float nullable;
  queued_duration: float nullable;
  when: string; (* TODO Possible variant *)
  manual: bool;
  allow_failure: bool;
  user: user_short;
  runner: runner nullable;
  artifacts_file: artifacts_file;
  environment: string nullable;
} <ocaml field_prefix="pipeline_build_">

type pipeline_attributes = {
  id: int;
  ref: string;
  tag: bool;
  sha: string;
  before_sha: string;
  source: string;
  status: string; (* TODO Possible variant *)
  detailed_status: string;
  stages: string list;
  created_at: date_time;
  finished_at: date_time;
  duration: int;
  queued_duration: int;
  variables: string list;
} <ocaml field_prefix="pipeline_attributes_">

type pipeline_webhook = {
  attributes<json name="object_attributes">: pipeline_attributes;
  merge_request: merge_request_short;
  user: user_short;
  project: project_webhook;
  commit: commit_short_webhook;
  builds: pipeline_build list;
} <ocaml field_prefix="pipeline_webhook_">

type deployment_webhook = {
  status: string; (* TODO Possible variant *)
  status_changed_at: date_time;
  deployment_id: int;
  deployable_id: int;
  deployable_url: string;
  environment: string;
  project: project_webhook;
  short_sha: string;
  user: user_short;
  user_url: string;
  commit_url: string;
  commit_title: string;
}

type feature_flag_attributes = {
  id: int;
  name: string;
  description: string;
  active: bool;
}

type feature_flag_webhook = {
  project: project_webhook;
  user: user_short;
  user_url: string;
  object_attributes: feature_flag_attributes;
}

(* https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#events *)
type webhooks = webhook list

type webhook = [
  | Push <json name="push"> of push_webhook
  | MergeRequest <json name="merge_request"> of merge_request_webhook
  | Issue <json name="issue"> of issue_webhook
  | Note <json name="note"> of note_webhook
  | WikiPage <json name="wiki_page"> of wiki_page_webhook
  | Release <json name="release"> of release_webhook
  | Job <json name="build"> of job_webhook
  | Pipeline <json name="pipeline"> of pipeline_webhook
  | Deployment <json name="deployment"> of deployment_webhook
  | FeatureFlag <json name="feature_flag"> of feature_flag_webhook
] <ocaml field_prefix="webhook_">
  <json adapter.ocaml="Gitlab_json.Adapter.WebhookEvent">

(* https://docs.gitlab.com/ee/api/events.html *)
type events = event list
type event = {
  id: int;
  project_id: int;
  action_name: event_action_name nullable;
  target_id: int nullable;
  target_iid: int nullable ;
  target_type: event_target_type nullable;
  author_id: int;
  target_title: string nullable;
  created_at: date_time;

  ?author: user_short nullable;
  ?push_data: push_data nullable;
  ?note: note nullable;
  ?wiki_page: wiki_page nullable;
  author_username: string;
} <ocaml field_prefix="event_">

type event_target_type = [
  | Issue <json name="Issue">
  | Milestone <json name="Milestone">
  | MergeRequest <json name="MergeRequest">
  | Note <json name="Note">
  | Project <json name="Project">
  | Snippet <json name="Snippet">
  | User <json name="User">
  | WikiPage <json name="WikiPage::Meta">
  | DiffNote <json name="DiffNote">
  | DiscussionNote <json name="DiscussionNote">
]

type wiki_page = {
  format: string;
  slug: string;
  title: string;
} <ocaml field_prefix="wiki_page_">

type push_data = {
  commit_count: int;
  action: string;
  ref_type: string;
  commit_from: string nullable;
  commit_to: string nullable;
  ref: string nullable;
  commit_title: string nullable;
  ref_count: int nullable;
} <ocaml field_prefix="push_data_">

type event_action_name = [
  | Accepted <json name="accepted">
  | Approved <json name="approved">
  | Closed <json name="closed">
  | CommentedOn <json name="commented on">
  | Created <json name="created">
  | Destroyed <json name="destroyed">
  | Deleted <json name="deleted">
  | Expired <json name="expired">
  | Joined <json name="joined">
  | Left <json name="left">
  | Merged <json name="merged">
  | Opened <json name="opened">
  | Pushed <json name="pushed">
  | PushedTo <json name="pushed to">
  | PushedNew <json name="pushed new">
  | Reopened <json name="reopened">
  | Updated <json name="updated">
]

type noteable_type = [
  | MergeRequest <json name="MergeRequest">
  | Issue <json name="Issue">
]

type notes = note list

type note = {
  id: int;
  body: string;
  attachment: string nullable;
  author: user_short;
  created_at: date_time;
  updated_at: date_time;
  system: bool;
  noteable_id: int;
  noteable_type: noteable_type;
  resolvable: bool;
  confidential: bool;
  noteable_iid: int;
} <ocaml field_prefix="note_">

type create_note = {
  body: string;
  created_at: date_time option;
  merge_request_diff_sha: string option;
} <ocaml field_prefix="create_note_">

type branch = {
  id: int;
  project_id: int;
  name: string;
  created_at: date_time;
  updated_at: date_time;
  code_owner_approval_required: bool;
} <ocaml field_prefix="branch_">


type status_check_status = [
  | Approved <json name="approved">
  | Pending <json name="pending">
] <ocaml field_prefix="status_check_status_">

type status_check = {
  id: int;
  name: string;
  external_url: string;
  status: status_check_status;
} <ocaml field_prefix="status_check_">

type status_checks = status_check list

type external_status_check = {
  id: int;
  name: string;
  project_id: int;
  external_url: string;
  protected_branches: branch list;
} <ocaml field_prefix="external_status_check_">

type external_status_checks = external_status_check list

type branch_full = {
  name: string;
  merged: bool;
  protected: bool;
  developers_can_push: bool;
  developers_can_merge: bool;
  can_push: bool;
  default: bool;
  web_url: string;
  commit: commit;
}  <ocaml field_prefix="branch_full_">

type branches_full = branch_full list

type scope = [
  | Api <json name="api">
  | ReadApi <json name="read_api">
  | ReadUser <json name="read_user">
  | ReadRegistry <json name="read_registry">
  | WriteRegistry <json name="write_registry">
  | ReadRepository <json name="read_repository">
  | WriteRepository <json name="write_repository">
]

type auth = {
  access_token: string;
  token_type: string;
  expires_in: int;
  refresh_token: string;
  created_at: int;
}

type personal_access_token = {
  id: int;
  name: string;
  revoked: bool;
  created_at: date_time;
  scopes: scope list;
  user_id: int;
  active: bool;
  expires_at: string nullable;
} <ocaml field_prefix="personal_access_token_">

type personal_access_tokens = personal_access_token list

type project_access_token = {
  id: int;
  name: string;
  revoked: bool;
  created_at: date_time;
  scopes: scope list;
  user_id: int;
  active: bool;
  expires_at: string nullable;
} <ocaml field_prefix="project_access_token_">

type project_access_tokens = project_access_token list


(** Types for creating new resources via API.
    This reuses the enum serialisation code.
  *)
type new_token = {
  name : string;
  expires_at : string;
  scopes : scope list;
}

type new_status = {
  state : commit_status_status;
  ?ref_name : string nullable;
  ?name : string nullable;
  ?target_url : string nullable;
  ?description : string nullable;
  ?coverage : int nullable;
  ?pipeline_id : int nullable;
}

type new_comment = {
  note : string;
  ?path : string nullable;
  ?line : int nullable;
  ?line_type : line_type nullable;
}

type new_milestone = {
  title: string;
  ?description: string nullable;
  ?due_date: string nullable;
  ?start_date: string nullable;
}

type project_hook = {
  id: int;
  url: string;
  created_at: date_time;
  push_events: bool;
  tag_push_events: bool;
  merge_requests_events: bool;
  repository_update_events: bool;
  enable_ssl_verification: bool;
  project_id: int;
  issues_events: bool;
  confidential_issues_events: bool;
  note_events: bool;
  pipeline_events: bool;
  wiki_page_events: bool;
  deployment_events: bool;
  job_events: bool;
  releases_events: bool;
  confidential_note_events: bool nullable;
  push_events_branch_filter: string nullable;
}

type project_hooks = project_hook list

type create_project_hook = {
  ?id: int option;
  url: string;
  ?confidential_issues_events: bool option;
  ?confidential_note_events: bool option;
  ?deployment_events: bool option;
  ?enable_ssl_verification: bool option;
  ?issues_events: bool option;
  ?job_events: bool option;
  ?merge_requests_events: bool option;
  ?note_events: bool option;
  ?pipeline_events: bool option;
  ?push_events_branch_filter: string option;
  ?push_events: bool option;
  ?releases_events: bool option;
  ?tag_push_events: bool option;
  ?repository_update_events: bool option;
  ?wiki_page_events: bool option;
  ?token: string option;
}
