type error = {
  resource: string;
  ?field: string option;
  code: string;
  ?message: string option;
} <ocaml field_prefix="error_">

type message = {
  message: string;
  ~errors <ocaml default="[]">: error list;
} <ocaml field_prefix="message_">

type error_detail = {
  message: string;
  detail: string option
}

type scope = [
  | CreatedByMe <json name="created_by_me">
  | AssignedToMe <json name="assigned_to_me">
  | All <json name="all">
]

type user = {
  id: int;
  username: string;
  name: string;
  state: string;
  avatar_url: string;
  web_url: string;
  created_at: string;
  ?bio: string option;
  ?bio_html: string option;
  ?location: string option;
  ?public_email: string option;
  ?skype: string option;
  ?linkedin: string option;
  ?twitter: string option;
  ?website_url: string option;
  ?organization: string option;
  ?job_title: string option;
  ?pronouns: string option;
  bot: bool;
  work_information: string nullable;
  followers: int;
  following: int;
} <ocaml field_prefix="user_">

type user_short = {
  id: int;
  username: string;
  name: string;
  ?state: string nullable;
  avatar_url: string;
  ?web_url: string nullable;
  ?email: string nullable;
} <ocaml field_prefix="user_short_">

type users = user_short list

type owner = {
  id: int;
  name: string;
  created_at: string;
} <ocaml field_prefix="owner_">

type namespace = {
  id: int;
  name: string;
  path: string;
  kind: string;
  full_path: string;
} <ocaml field_prefix="namespace_">

type merge_method = [
  | Merge <json name="merge">
  | RebaseMerge <json name="rebase_merge">
  | FastForward <json name="ff">
]

type statistics = {
  commit_count: int;
  storage_size: int;
  repository_size: int;
  wiki_size: int;
  lfs_objects_size: int;
  job_artifacts_size: int;
  packages_size: int;
  snippets_size: int;
} <ocaml field_prefix="statistics_">

type links = {
  self: string;
  issues: string;
  merge_requests: string;
  repo_branches: string;
  labels: string;
  events: string;
  members: string;
} <ocaml field_prefix="links_">

type visibility = [
  | Private <json name="private">
  | Public <json name="public">
  | Internal <json name="internal">
]

type project_short = {
  id: int;
  name: string;
  description: string;
  name_with_namespace: string;
  path: string;
  path_with_namespace: string;
  created_at: string;
  default_branch: string;
(*  tag_list: string list; *)
(*  topic_list: string list; *)
  ssh_url_to_repo: string;
  http_url_to_repo: string;
  web_url: string;
  readme_url: string;
  avatar_url: string nullable;
  forks_count: int;
  star_count: int;
  last_activity_at: string;
  namespace: namespace;
} <ocaml field_prefix="project_short_">

type project_full = {
  inherit project_short;
  default_branch: string;
  visibility: visibility;
  path: string;
  path_with_namespace: string;
  issues_enabled: bool;
  open_issues_count: int;
  merge_requests_enabled: bool;
  jobs_enabled: bool;
  wiki_enabled: bool;
  snippets_enabled: bool;
  can_create_merge_request_in: bool;
  resolve_outdated_diff_discussions: bool;
  container_registry_enabled: bool;
  creator_id: int;
  import_status: string;
  archived: bool;
  avatar_url: string;
  shared_runners_enabled: bool;
  runners_token: string;
  ci_default_git_depth: int;
  ci_forward_deployment_enabled: bool;
  public_jobs: bool;
  shared_with_groups: string list;
  only_allow_merge_if_pipeline_succeeds: bool;
  allow_merge_on_skipped_pipeline: bool;
  restrict_user_defined_variables: bool;
  only_allow_merge_if_all_discussions_are_resolved: bool;
  remove_source_branch_after_merge: bool;
  request_access_enabled: bool;
  merge_method: merge_method;
  squash_option: string;
  autoclose_referenced_issues: bool;
  suggestion_commit_message: string nullable;
  marked_for_deletion_at: string;
  marked_for_deletion_on: string;
  statistics: statistics;
  container_registry_image_prefix: string;
  links: links;
} <ocaml field_prefix="project_full_">

type projects = project_short list

type state = [
  | Opened <json name="opened">
  | Closed <json name="closed">
  | Locked <json name="locked">
  | Merged <json name="merged">
]

type merge_status = [
 | Unchecked <json name="unchecked">
 | Checking <json name="checking">
 | CanBeMerged <json name="can_be_merged">
 | CannotBeMerged <json name="cannot_be_merged">
 | CannotBeMergedRecheck <json name="cannot_be_merged_recheck">
]

type milestone = {
  id: int;
  iid: int;
  project_id: int;
  title: string;
  description: string;
  state: state;
  created_at: string;
  updated_at: string;
  due_date: string;
  start_date: string;
  web_url: string;
} <ocaml field_prefix="milestone_">

type references = {
  short: string;
  relative: string;
  full: string;
} <ocaml field_prefix="references_">

type time_stats = {
  time_estimate: int;
  total_time_spent: int;
  human_time_estimate: int nullable;
  human_total_time_spent: int nullable;
} <ocaml field_prefix="time_stats_">

type task_completion_status = {
  count: int;
  completed_count: int;
} <ocaml field_prefix="time_completion_status_">

type merge_request = {
  id: int;
  iid: int;
  project_id: int;
  title: string;
  description: string;
  state: state;
  merged_by: user_short nullable;
  merged_at: string nullable;
  closed_by: user nullable;
  closed_at: string nullable;
  created_at: string nullable;
  updated_at: string nullable;
  target_branch: string;
  source_branch: string;
  upvotes: int;
  downvotes: int;
  author: user_short;
  assignee: user_short nullable;
  assignees: user_short list;
  reviewers: user_short list;
  source_project_id: int;
  target_project_id: int;
  labels: string list;
  draft: bool;
  work_in_progress: bool;
  milestone: milestone nullable;
  merge_when_pipeline_succeeds: bool;
  merge_status: merge_status;
  sha: string;
  merge_commit_sha: string nullable;
  squash_commit_sha: string nullable;
  user_notes_count: int;
  discussion_locked: bool nullable;
  should_remove_source_branch: bool nullable;
  force_remove_source_branch: bool nullable;
  ?allow_collaboration: bool option;
  ?allow_maintainer_to_push: bool option;
  web_url: string;
  references: references;
  time_stats: time_stats;
  squash: bool;
  task_completion_status: task_completion_status;
} <ocaml field_prefix="merge_request_">

type merge_requests = merge_request list

type commit = {
  id: string;
  short_id: string;
  title: string;
  author_name: string;
  author_email: string;
  created_at: string option;
  message: string;
} <ocaml field_prefix="commit_">

type commits = commit list

type change = {
  old_path: string;
  new_path: string;
  a_mode: string;
  b_mode: string;
  diff: string;
  new_file: bool;
  renamed_file: bool;
  deleted_file: bool;
} <ocaml field_prefix="change_">

type changes = {
  id: int;
  iid: int;
  project_id: int;
  title: string;
  state: string; (* TODO Should be an enum *)
  created_at: string;
  updated_at: string;
  target_branch: string;
  source_branch: string;
  upvotes: int;
  downvotes: int;
  author: user_short;
  ?assignee: user_short option;
  ?assignees: user_short list option;
  reviewers: user_short list;
  source_project_id: int;
  target_project_id: int;
  labels: string list;
  description: string;
  draft: bool;
  work_in_progress: bool;
  milestone: milestone nullable;
  merge_when_pipeline_succeeds: bool;
  merge_status: merge_status;
  subscribed: bool;
  sha: string;
  merge_commit_sha: string nullable;
  squash_commit_sha: string nullable;
  user_notes_count: int;
  changes_count: int;
  should_remove_source_branch: bool;
  force_remove_source_branch: bool;
  squash: bool;
  web_url: string;
  references: references;
  discussion_locked: bool;
  time_stats: time_stats;
  task_completion_status: task_completion_status;
  changes: change list;
  overflow: bool;
} <ocaml field_prefix="changes_">

type repository = {
  name: string;
  url: string;
  description: string;
  homepage: string;
  ?git_http_url: string nullable;
  ?git_ssh_url: string nullable;
  ?visibility_level: int option;
} <ocaml field_prefix="repository_">

type author = {
  name: string;
  email: string;
} <ocaml field_prefix="author_">

type issue = {
  author_id: int;
  closed_at: string nullable;
  confidential: bool;
  created_at: string;
  description: string;
  discussion_locked: string nullable;
  due_date: string nullable;
  id: int;
  iid: int;
  last_edited_at: string nullable;
  last_edited_by_id: string nullable;
  milestone_id: string nullable;
  moved_to_id: string nullable;
  duplicated_to_id: int nullable;
  project_id: int;
  relative_position: int;
  state_id: int;
  time_estimate: int;
  title: string;
  updated_at: string;
  updated_by_id: string nullable;
  weight: string nullable;
  url: string;
  total_time_spent: int;
  time_change: int;
  human_total_time_spent: int nullable;
  human_time_change: int nullable;
  human_time_estimate: int nullable;
  assignee_ids: int list;
  assignee_id: int;
  labels: string list;
  state: state;
  severity: string;
} <ocmal field_prefix="issue_">

type commit_short_webhook = {
  id: string;
  message: string;
  title: string;
  timestamp: string;
  url: string;
  author: author;
} <ocaml field_prefix="commit_short_webhook">

type project_webhook = {
  id: int;
  name: string;
  description: string nullable;
  web_url: string;
  avatar_url: string nullable;
  git_ssh_url: string;
  git_http_url: string;
  namespace: string;
  path_with_namespace: string;
  visibility_level: int;
  default_branch: string;
  ?ci_config_path: string option;
  ?homepage: string option;
  ?url: string option;
  ?ssh_url: string option;
  ?http_url: string option;
} <ocaml field_prefix="project_webhook_">

type merge_request_attributes = {
  assignee_id: int;
  assignee_ids: int list;
  author_id: int;
  created_at: string;
  description: string;
  head_pipeline_id: string nullable;
  id: int;
  iid: int;
  last_edited_at: string nullable;
  last_edited_by_id: string nullable;
  last_commit: commit_short_webhook;
  merge_commit_sha: string nullable;
  merge_error: string nullable;
  merge_status: merge_status;
  merge_user_id: int nullable;
  merge_when_pipeline_succeeds: bool;
  milestone_id: string nullable;
  source: project_webhook;
  source_branch: string;
  source_project_id: int;
  state_id: int;
  state: string;
  target: project_webhook;
  target_branch: string;
  target_project_id: int;
  title: string;
  updated_at: string;
  updated_by_id: int;
  url: string;
  work_in_progress: bool;
  total_time_spent: int;
  time_change: int;
  human_total_time_spent: int nullable;
  human_time_change: int nullable;
  human_time_estimate: int nullable;
} <ocaml field_prefix="merge_request_attributes_">

type label = {
  id: int;
  title: string;
  colour: string;
  project_id: int;
  created_at: string;
  updated_at: string;
  template: bool;
  description: string;
  label_type: string <json name="type">;
  group_id: int;
} <ocaml field_prefix="label_">

type updated_by_id = {
  previous: int nullable;
  current: int;
} <ocaml field_prefix="update_by_id_">

type updated_at = {
  previous: string;
  current: string;
} <ocaml field_prefix="updated_at_">

type labels = {
  previous: label list;
  current: label list;
} <ocaml field_prefix="labels_">

type assignees = {
  previous: user_short list;
  current: user_short list;
} <ocaml field_prefix="assignees_">

type merge_request_changes = {
  ?updated_by_id: updated_by_id option;
  ?updated_at: updated_at option;
  ?assignees: assignees option;
} <ocaml field_prefix="merge_request_changes_">

type author_short = {
  name: string;
  email: string;
} <ocaml field_prefix="author_short_">

(* TODO Rename these *)
type commit_webhook = {
  inherit commit_short_webhook;
  added: string list;
  modified: string list;
  removed: string list;
} <ocaml field_prefix="commit_webhook_">

type commits_webhook = commit_webhook list

type push_webhook = {
  before: string;
  after: string;
  ref: string;
  checkout_sha: string;
  message: string nullable;
  user_id: int;
  user_name: string;
  user_username: string;
  user_email: string;
  user_avatar: string;
  project_id: int;
  project: project_webhook;
  commits: commits_webhook;
  total_commits_count: int;
  (* push_options: ??? *)
  repository: repository;
} <ocaml field_prefix="push_webhook_">

type merge_request_webhook = {
  user: user_short;
  project: project_webhook;
  attributes<json name="object_attributes">: merge_request_attributes;
  repository: repository;
  labels: label list;
  (* changes: ???; *)
  assignees: user_short list;
} <ocaml field_prefix="merge_request_webhook_">

type issue_attributes = {
  assignee_id: int nullable;
  assignee_ids: int list;
  author_id: int;
  closed_at: string nullable;
  confidential: bool;
  created_at: string;
  description: string;
 (*
  discussion_locked: NULL;
  due_date: NULL;
  duplicated_to_id:NULL;
  human_time_change:NULL;
  human_time_estimate:NULL;
  human_total_time_spent:NULL;
  *)
  id: int;
  iid: int;
  labels: string list;
  last_edited_at: string nullable;
  last_edited_by_id: string nullable;
  milestone_id: string nullable;
  moved_to_id: int nullable;
  project_id: int;
  relative_position: int;
  severity: string;
  state: string;
  state_id: int;
  time_change: int;
  time_estimate: int;
  title: string;
  total_time_spent: int;
  updated_at: string;
  updated_by_id: int nullable;
  url: string;
  weight: int nullable;
} <ocaml field_prefix="issue_attributes_">

type issue_webhook = {
  user: user_short;
  project: project_webhook;
  attributes <json name="object_attributes">: issue_attributes;
  labels: label list;
  (* changes: ???; *)
  repository: repository;
  assignees: user_short list;
} <ocaml field_prefix="issue_webhook_">

type note_attributes = {
  attachment: string nullable;
  author_id: int;
  change_position: string nullable;
  commit_id: string nullable;
  created_at: string;
  discussion_id: string;
  id: int;
  line_code: int nullable;
  note: string;
  noteable_id: int;
  noteable_type: string;
  original_position: string nullable;
  position: string nullable;
  project_id: int;
  resolved_at: string nullable;
  resolved_by_id: string nullable;
  resolved_by_push: string nullable;
  st_diff: string nullable;
  system: bool;
  note_attribute_type <json name="type">: string nullable;
  updated_at: string;
  updated_by_id: string nullable;
  description: string;
  url: string;
} <ocaml field_prefix="note_attrbutes_">

type note_webhook = {
  user: user_short;
  project: project_webhook;
  attributes <json name="object_attributes">: note_attributes;
  repository: repository;
  project_id: int;
  issue: issue;
} <ocaml field_prefix="note_webhook_">

type wiki = {
  web_url: string;
  git_ssh_url: string;
  git_http_url: string;
  path_with_namespace: string;
  default_branch: string;
} <ocaml field_prefix="wiki_">

type wiki_attributes = {
  title: string;
  content: string;
  format: string;
  slug: string;
  url: string;
  action: string;
  diff_url: string;
} <ocaml field_prefix="wiki_attributes_">

type wiki_page_webhook = {
  user: user_short;
  project: project_webhook;
  wiki: wiki;
  attributes <json name="object_attributes">: wiki_attributes;
} <ocaml field_prefix="wiki_page_webhook_">

type source = {
  format: string;
  url: string;
} <ocaml field_prefix="source_">

type assets = {
  count: int;
  links: string list;
  sources: source list;
} <ocaml field_prefix="assets_">

type release_webhook = {
  id: int;
  created_at: string;
  description: string;
  name: string;
  released_at: string;
  tag: string;
  project: project_webhook;
  url: string;
  action: string;
  assets: assets;
  commit: commit_short_webhook;
} <ocaml field_prefix="release_webhook_">

(* https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#events *)
type webhooks = webhook list

type webhook = [
  | Push <json name="push"> of push_webhook
  | MergeRequest <json name="merge_request"> of merge_request_webhook
  | Issue <json name="issue"> of issue_webhook
  | Note <json name="note"> of note_webhook
  | WikiPage <json name="wiki_page"> of wiki_page_webhook
  | Release <json name="release"> of release_webhook
  (* TODO Add support for these webhooks.
  | Pipeline
  | Job
  | Deployment
  | FeatureFlag
   *)
] <ocaml field_prefix="webhook_">
  <json adapter.ocaml="Gitlab_json.Adapter.WebhookEvent">

(* https://docs.gitlab.com/ee/api/events.html *)
type events = event list
type event = {
  id: int;
  project_id: int;
  action_name: event_action_name nullable;
  target_id: int nullable;
  target_iid: int nullable;
  target_type: event_target_type nullable;
  author_id: int;
  target_title: string nullable;
  created_at: string;

  ?author: user_short nullable;
  ?push_data: push_data nullable;
  ?note: note nullable;
  ?wiki_page: wiki_page nullable;
  author_username: string;
} <ocaml field_prefix="event_">

type event_target_type = [
  | Issue <json name="Issue">
  | Milestone <json name="Milestone">
  | MergeRequest <json name="MergeRequest">
  | Note <json name="Note">
  | Project <json name="Project">
  | Snippet <json name="Snippet">
  | User <json name="User">
  | WikiPage <json name="WikiPage::Meta">
]
type wiki_page = {
  format: string;
  slug: string;
  title: string;
} <ocaml field_prefix="wiki_page_">

type push_data = {
  commit_count: int;
  action: string;
  ref_type: string;
  commit_from: string nullable;
  commit_to: string;
  ref: string;
  commit_title: string;
  ref_count: string nullable;
} <ocaml field_prefix="push_data_">

type event_action_name = [
  | Approved <json name="approved">
  | Closed <json name="closed">
  | CommentedOn <json name="commented on">
  | Created <json name="created">
  | Destroyed <json name="destroyed">
  | Expired <json name="expired">
  | Joined <json name="joined">
  | Left <json name="left">
  | Merged <json name="merged">
  | Opened <json name="opened">
  | Pushed <json name="pushed">
  | PushedTo <json name="pushed to">
  | PushedNew <json name="pushed new">
  | Reopened <json name="reopend">
  | Updated <json name="updated">
]

type noteable_type = [
  | MergeRequest <json name="MergeRequest">
]

type note = {
  id: int;
  note_type <json name="type"> : string nullable;
  body: string;
  attachment: string nullable;
  author: user_short;
  created_at: string;
  updated_at: string;
  system: bool;
  noteable_id: int;
  noteable_type: noteable_type;
  resolvable: bool;
  confidential: bool;
  noteable_iid: int;
  (* commands_changes: {} *)
} <ocaml field_prefix="note_">