type error = {
  resource: string;
  ?field: string option;
  code: string;
  ?message: string option;
} <ocaml field_prefix="error_">

type message = {
  message: string;
  ~errors <ocaml default="[]">: error list;
} <ocaml field_prefix="message_">

type error_detail = {
  message: string;
  detail: string option
}

type scope = [
  | CreatedByMe <json name="created_by_me">
  | AssignedToMe <json name="assigned_to_me">
  | All <json name="all">
]

type user = {
  id: int;
  username: string;
  name: string;
  state: string;
  avatar_url: string;
  web_url: string;
  created_at: string;
  ?bio: string option;
  ?bio_html: string option;
  ?location: string option;
  ?public_email: string option;
  ?skype: string option;
  ?linkedin: string option;
  ?twitter: string option;
  ?website_url: string option;
  ?organization: string option;
  ?job_title: string option;
  ?pronouns: string option;
  bot: bool;
  work_information: string nullable;
  followers: int;
  following: int;
} <ocaml field_prefix="user_">

type user_short = {
  id: int;
  username: string;
  name: string;
  state: string;
  avatar_url: string;
  web_url: string;
} <ocaml field_prefix="user_short_">

type users = user_short list

type owner = {
  id: int;
  name: string;
  created_at: string;
} <ocaml field_prefix="owner_">

type namespace = {
  id: int;
  name: string;
  path: string;
  kind: string;
  full_path: string;
} <ocaml field_prefix="namespace_">

type merge_method = [
  | Merge <json name="merge">
  | RebaseMerge <json name="rebase_merge">
  | FastForward <json name="ff">
]

type statistics = {
  commit_count: int;
  storage_size: int;
  repository_size: int;
  wiki_size: int;
  lfs_objects_size: int;
  job_artifacts_size: int;
  packages_size: int;
  snippets_size: int;
} <ocaml field_prefix="statistics_">

type links = {
  self: string;
  issues: string;
  merge_requests: string;
  repo_branches: string;
  labels: string;
  events: string;
  members: string;
} <ocaml field_prefix="links_">

type visibility = [
  | Private <json name="private">
  | Public <json name="public">
  | Internal <json name="internal">
]

type project_short = {
  id: int;
  description: string nullable;
  name: string;
  name_with_namespace: string;
  created_at: string;
  default_branch: string;
  tag_list: string list;
  topics: string list;
  ssh_url_to_repo: string;
  http_url_to_repo: string;
  web_url: string;
  readme_url: string;
  avatar_url: string nullable;
  forks_count: int;
  star_count: int;
  last_activity_at: string;
  namespace: namespace;
} <ocaml field_prefix="project_short_">

type project_full = {
  inherit project_short;

  default_branch: string;
  visibility: visibility;
  path: string;
  path_with_namespace: string;
  issues_enabled: bool;
  open_issues_count: int;
  merge_requests_enabled: bool;
  jobs_enabled: bool;
  wiki_enabled: bool;
  snippets_enabled: bool;
  can_create_merge_request_in: bool;
  resolve_outdated_diff_discussions: bool;
  container_registry_enabled: bool;
  created_at: string;
  creator_id: int;
  import_status: string;
  archived: bool;
  avatar_url: string;
  shared_runners_enabled: bool;
  runners_token: string;
  ci_default_git_depth: int;
  ci_forward_deployment_enabled: bool;
  public_jobs: bool;
  shared_with_groups: string list;
  only_allow_merge_if_pipeline_succeeds: bool;
  allow_merge_on_skipped_pipeline: bool;
  restrict_user_defined_variables: bool;
  only_allow_merge_if_all_discussions_are_resolved: bool;
  remove_source_branch_after_merge: bool;
  request_access_enabled: bool;
  merge_method: merge_method;
  squash_option: string;
  autoclose_referenced_issues: bool;
  suggestion_commit_message: string nullable;
  marked_for_deletion_at: string;
  marked_for_deletion_on: string;
  statistics: statistics;
  container_registry_image_prefix: string;
  links: links;
} <ocaml field_prefix="project_full_">

type projects = project_short list

type state = [
  | Opened <json name="opened">
  | Closed <json name="closed">
  | Locked <json name="locked">
  | Merged <json name="merged">
]

type merge_status = [
 | Unchecked <json name="unchecked">
 | Checking <json name="checking">
 | CanBeMerged <json name="can_be_merged">
 | CannotBeMerged <json name="cannot_be_merged">
 | CannotBeMergedRecheck <json name="cannot_be_merged_recheck">
]

type milestone = {
  id: int;
  iid: int;
  project_id: int;
  title: string;
  description: string;
  state: state;
  created_at: string;
  updated_at: string;
  due_date: string;
  start_date: string;
  web_url: string;
} <ocaml field_prefix="milestone_">

type references = {
  short: string;
  relative: string;
  full: string;
} <ocaml field_prefix="references_">

type time_stats = {
  time_estimate: int;
  total_time_spent: int;
  human_time_estimate: int nullable;
  human_total_time_spent: int nullable;
} <ocaml field_prefix="time_stats_">

type task_completion_status = {
  count: int;
  completed_count: int;
} <ocaml field_prefix="time_completion_status_">

type merge_request = {
  id: int;
  iid: int;
  project_id: int;
  title: string;
  description: string;
  state: state;
  merged_by: user_short nullable;
  merged_at: string nullable;
  closed_by: user nullable;
  closed_at: string nullable;
  created_at: string nullable;
  updated_at: string nullable;
  target_branch: string;
  source_branch: string;
  upvotes: int;
  downvotes: int;
  author: user_short;
  assignee: user_short nullable;
  assignees: user_short list;
  reviewers: user_short list;
  source_project_id: int;
  target_project_id: int;
  labels: string list;
  draft: bool;
  work_in_progress: bool;
  milestone: milestone nullable;
  merge_when_pipeline_succeeds: bool;
  merge_status: merge_status;
  sha: string;
  merge_commit_sha: string nullable;
  squash_commit_sha: string nullable;
  user_notes_count: int;
  discussion_locked: bool nullable;
  should_remove_source_branch: bool nullable;
  force_remove_source_branch: bool nullable;
  ?allow_collaboration: bool option;
  ?allow_maintainer_to_push: bool option;
  web_url: string;
  references: references;
  time_stats: time_stats;
  squash: bool;
  task_completion_status: task_completion_status;
} <ocaml field_prefix="merge_request_">

type merge_requests = merge_request list

type commit = {
  id: string;
  short_id: string;
  title: string;
  author_name: string;
  author_email: string;
  created_at: string;
  message: string;
} <ocaml field_prefix="commit_">

type commits = commit list

type change = {
  old_path: string;
  new_path: string;
  a_mode: string;
  b_mode: string;
  diff: string;
  new_file: bool;
  renamed_file: bool;
  deleted_file: bool;
} <ocaml field_prefix="change_">

type changes = {
  id: int;
  iid: int;
  project_id: int;
  title: string;
  state: string; (* TODO Should be an enum *)
  created_at: string;
  updated_at: string;
  target_branch: string;
  source_branch: string;
  upvotes: int;
  downvotes: int;
  author: user_short;
  assignee: user_short;
  assignees: user_short list;
  reviewers: user_short list;
  source_project_id: int;
  target_project_id: int;
  labels: string list;
  description: string;
  draft: bool;
  work_in_progress: bool;
  milestone: milestone nullable;
  merge_when_pipeline_succeeds: bool;
  merge_status: merge_status;
  subscribed: bool;
  sha: string;
  merge_commit_sha: string nullable;
  squash_commit_sha: string nullable;
  user_notes_count: int;
  changes_count: int;
  should_remove_source_branch: bool;
  force_remove_source_branch: bool;
  squash: bool;
  web_url: string;
  references: references;
  discussion_locked: bool;
  time_stats: time_stats;
  task_completion_status: task_completion_status;
  changes: change list;
  overflow: bool;
} <ocaml field_prefix="changes_">
